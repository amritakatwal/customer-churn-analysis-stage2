import os
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
from sklearn.cluster import KMeans
from sklearn.preprocessing import StandardScaler
from sklearn.datasets import make_blobs
import joblib

# Create folder structure
base_dir = "/mnt/data/Clustering_Analysis"
folders = [
    "Optimal_Clusters",
    "KMeans_Model",
    "Cluster_Visualisations"
]

for folder in folders:
    os.makedirs(os.path.join(base_dir, folder), exist_ok=True)

# Generate synthetic dataset for clustering (simulate customer data)
X, _ = make_blobs(n_samples=300, centers=4, cluster_std=1.0, random_state=42)
df = pd.DataFrame(X, columns=["Tenure", "MonthlyCharges"])

# Standardize features
scaler = StandardScaler()
X_scaled = scaler.fit_transform(df)

# Elbow method plot
inertia = []
K_range = range(1, 11)
for k in K_range:
    kmeans = KMeans(n_clusters=k, random_state=42)
    kmeans.fit(X_scaled)
    inertia.append(kmeans.inertia_)

# Plot elbow curve
plt.figure(figsize=(8, 5))
plt.plot(K_range, inertia, marker='o')
plt.title("Elbow Method for Optimal k")
plt.xlabel("Number of clusters (k)")
plt.ylabel("Inertia")
elbow_plot_path = os.path.join(base_dir, "Optimal_Clusters", "elbow_method_plot.png")
plt.savefig(elbow_plot_path)
plt.close()

# Train KMeans with optimal k=4
optimal_k = 4
kmeans_model = KMeans(n_clusters=optimal_k, random_state=42)
df["Cluster"] = kmeans_model.fit_predict(X_scaled)

# Save model and scaler
joblib.dump(kmeans_model, os.path.join(base_dir, "KMeans_Model", "trained_kmeans_model.pkl"))
joblib.dump(scaler, os.path.join(base_dir, "KMeans_Model", "feature_scaler.pkl"))

# Save clustering script
train_script_path = os.path.join(base_dir, "KMeans_Model", "train_kmeans_model.py")
with open(train_script_path, "w") as f:
    f.write("""
import pandas as pd
import joblib
from sklearn.cluster import KMeans
from sklearn.preprocessing import StandardScaler

# Load data
df = pd.read_csv('customer_data.csv')  # Replace with actual file path
features = df[['Tenure', 'MonthlyCharges']]

# Standardize features
scaler = StandardScaler()
X_scaled = scaler.fit_transform(features)

# Train KMeans
kmeans = KMeans(n_clusters=4, random_state=42)
df['Cluster'] = kmeans.fit_predict(X_scaled)

# Save model and scaler
joblib.dump(kmeans, 'trained_kmeans_model.pkl')
joblib.dump(scaler, 'feature_scaler.pkl')
""")

# Save labeled dataset
labeled_csv_path = os.path.join(base_dir, "Cluster_Visualisations", "labeled_clusters.csv")
df.to_csv(labeled_csv_path, index=False)

# Visualize clusters
plt.figure(figsize=(8, 5))
for i in range(optimal_k):
    cluster_data = df[df["Cluster"] == i]
    plt.scatter(cluster_data["Tenure"], cluster_data["MonthlyCharges"], label=f"Cluster {i}")
plt.title("Customer Clusters")
plt.xlabel("Tenure")
plt.ylabel("Monthly Charges")
plt.legend()
cluster_plot_path = os.path.join(base_dir, "Cluster_Visualisations", "cluster_plot.png")
plt.savefig(cluster_plot_path)
plt.close()

# Save cluster insights
insights_path = os.path.join(base_dir, "Cluster_Visualisations", "cluster_insights.md")
with open(insights_path, "w") as f:
    f.write("""
# Cluster Insights

- **Cluster 0**: New customers with mid-level charges – may need onboarding support.
- **Cluster 1**: Long-tenure, high-charge users – likely loyal; consider upsell strategies.
- **Cluster 2**: Short-tenure, low-charge users – monitor for churn risk.
- **Cluster 3**: Medium-tenure, stable charges – potential for long-term retention.

These insights are based on synthetic data. Replace with real customer metrics for actionable strategies.
""")

# Save summary for optimal cluster selection
summary_path = os.path.join(base_dir, "Optimal_Clusters", "cluster_selection_summary.md")
with open(summary_path, "w") as f:
    f.write("""
# Optimal Cluster Selection Summary

The Elbow Method was used to determine the optimal number of clusters (k).
By observing the inertia values, k=4 was selected as the point where adding more clusters yielded diminishing returns.

This choice ensures interpretable and meaningful customer segments.
""")

base_dir  # Return path for download or inspection


